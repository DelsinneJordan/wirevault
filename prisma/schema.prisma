// ---------- generator & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------- models ----------

model Site {
  id        Int      @id @default(autoincrement())
  shortId   String   @unique
  name      String
  customer  String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boards     Board[]
  qrTokens   QrToken[]
  accessLogs AccessLog[]
}

model Board {
  id      Int    @id @default(autoincrement())
  shortId String @unique
  name    String

  // NEW site relation (optional for Step A)
  siteId Int?
  site   Site? @relation(fields: [siteId], references: [id])

  // --- keep these legacy columns for backfill ---
  customerName String?
  siteAddress  String?
  qrTokenId    Int? // keep as a plain scalar (no relation)
  // ---------------------------------------------

  // (your electrical detailsâ€¦)
  type           String?
  supplyType     String?
  voltage        String?
  earthingSystem String?
  incomingCable  String?
  ratedCurrent   String?
  frequency      String?
  solar          Boolean?
  description    String?
  lastInspection DateTime?
  nextInspection DateTime?

  state     String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  docs       BoardDoc[]
  accessLogs AccessLog[]
  changes    BoardChange[]
}

model BoardDoc {
  id         Int      @id @default(autoincrement())
  boardId    Int
  board      Board    @relation(fields: [boardId], references: [id])
  label      String
  mime       String
  storageKey String
  createdAt  DateTime @default(now())
}

model BoardChange {
  id        Int      @id @default(autoincrement())
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

model QrToken {
  id        Int      @id @default(autoincrement())
  shortId   String   @unique
  pinHash   String
  status    String   @default("UNASSIGNED") // UNASSIGNED | ASSIGNED | RETIRED
  // Now links to Site (0..n tokens per site)
  siteId    Int?
  site      Site?    @relation(fields: [siteId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // what was accessed / attempted
  shortId   String
  success   Boolean
  ip        String?
  userAgent String?

  // optional links to Site/Board for context
  siteId Int?
  site   Site? @relation(fields: [siteId], references: [id])

  boardId Int?
  board   Board? @relation(fields: [boardId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
